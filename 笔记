一,GIT
1.git是一款软件,是一个代码工具
2.git是全球最大的开源代码网站.
3.分布式:一个地方出了问题不会影响其他的
4.集中式:方便,缺点是一个出了问题就完了
5.SVN  (GIT集中式)
客户单元(客户端)只与中央服务单元通信,客户单元之间不能通信.
客户单元上传代码到中央服务单元,中央服务单元给客户单元配置权限.
SVN优点:思想简单,使用简单,开源,方便代码的保密.缺点:过度依赖于中央服务单元(一般中央服务单元有备份).
6.GIT分布式
没有中央单元
任何两个客户端节点能够通信,可以主动将代码发送到其他人,其他人也能够从其他人中获取代码.
一个节点崩了,其他节点能够照常使用.
优点:网络传输速度快   缺点:不方便代码的保密,逻辑太多造成代码混论.
7.git安装(git就是一个软件)
打开终端输入git回车
8.git使用
git的整体结构
    工作区:在本地计算机上,写的代码都在工作区,要把工作区的代码经过暂存区同步到本地仓库
    暂存区:在本地计算机上,记录工作区变化,本地仓库根据暂存区的记录来同步
    本地仓库:在本地计算机上,对工作区的代码保存管理的.只有仓库区的内容才能与远程仓库交互.
    远程仓库:在网络主机上(别人的主机)
9.初始配置
git config--system:对整个系统有效
git config--global:只对这个用户有效
git config:只对项目有效
配置用户: 在终端中
    sudo git config --system user.name Tedu
    cat /etc/gitconfig
配置邮箱:
    git config --global user.email 1141686450@qq.com
配置代码目录(在代码项目目录):
    cd 1909/month02/lvze/day17(代码需要被git的目录被视为git管理的根目录)
    git init (git初始化:这里的目录是项目根目录,根目录下的所有的内容都能够在git中进行管理)
    ls -a (显示隐藏文件,发现. .. .git目录)
配置编译器 (配置编译器并非必须,只有用户和邮箱才是必须的):
    git config core.editor pycharm   (这个配置一定要在配置了git的根目录下进行)
    cat /.git/config
查看现有配置
    git config --list
存储备份
    cd .git/
不想让git管理
    将. .. .git删除就可以了
分支master(master分支):
    git status
工作区放到暂存区:
    git add readme.md   (同步一个文件,git add readme.md java.log 同步2个文件,git add *同步所有文件,git add .同步当前目录)
    git status          (变绿的是提交到暂存区成功的,变红的是提交没有成功的)
取消工作区放到暂存区的文件:
    git rm --cached readme.md   (取消对readme.md的暂存)

忽略某个文件不同步到暂存区:
    忽略规则: 4个
    举例:
        *.txt 忽略所有以.txt开头的文件   17.txt忽略以17.txt开头的文件
将文件保存到本地仓库:
    git commit 18.text -m "add a log file"    (将文件 18.text 保存到了仓库区)  ?
    git commit -m "add readme"   (保存所有文件到仓库区)   ?
查看提交日志
    git log (一次黄色(commit id)代表提交一次,最顶端的是最新提交的)
